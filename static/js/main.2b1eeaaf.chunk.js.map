{"version":3,"sources":["Components/Movie.js","Components/ListMovies.js","Components/ListPeople.js","Components/Main.js","Components/StarWarImg.js","App.js","serviceWorker.js","index.js"],"names":["Movie","props","movie","title","release_date","className","substring","Movies","useState","error","setError","isLoaded","setIsLoaded","items","setItems","useEffect","a","fetch","then","res","json","result","temp","i","results","length","j","fetchMovies","message","map","item","key","to","episode_id","src","alt","ListPeople","filmId","match","params","number","id","li","characters","link","replace","response","push","name","fetchData","secondColumnStart","Math","floor","date","slice","Roster","exact","path","component","ListMovies","StarWarImg","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.2b1eeaaf.chunk.js","sourcesContent":["import React from 'react'\nfunction Movie(props) {\n    const {title, release_date} = props.movie;\n    return (\n    <div>\n        {title}<div className=\"DateSize\">Release Year  {release_date.substring(0, 4)}</div>\n    </div>\n    )\n}\n\nexport default Movie","import React, { useState,useEffect } from 'react';\nimport { Link} from 'react-router-dom'\nimport Movie from './Movie';\nimport '../css/Movie.css';\n\nexport default function Movies() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n    useEffect(() => {\n      var fetchMovies = async() => {\n        await fetch(\"https://swapi.dev/api/films/\")\n          .then(res => res.json())\n          .then(\n            (result) => {\n              setIsLoaded(true);\n              var temp;\n              for (var i = 0; i < result.results.length; i++) \n              {\n              for (var j = i + 1; j < result.results.length; j++) { \n                  if (result.results[i].release_date.substring(0, 4) > result.results[j].release_date.substring(0, 4)) \n                  {\n                      temp = result.results[i];\n                      result.results[i] = result.results[j];\n                      result.results[j] = temp;\n                  }\n                }\n              }\n              setItems(result.results);\n            },\n            (error) => {\n              setIsLoaded(true);\n              setError(error);\n            }\n          )\n      }\n      fetchMovies();\n    },[])\n  \n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>\n        <img src=\"https://i.pinimg.com/originals/a7/b0/15/a7b015d343ad801ad6da8c242dc6ae06.gif\" alt=\"Loading...\" /></div>;\n    } else {\n      return (\n        <ul>\n          <h3 className=\"ColorM\">MOVIES</h3>\n          {items.map((item,i) => (\n          <div key={i}>\n          <h4 ><Link className=\"MText\" to={`/interactive-react/${item.title}/${item.release_date}/${item.episode_id}`}><Movie movie={item}/></Link></h4>\n          </div>\n          ))}\n        </ul>\n      );\n    }\n  }","import React, { useState,useEffect } from 'react';\nimport '../css/Movie.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default function ListPeople(props) {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  var filmId = props.match.params.number;\n \n  useEffect(() => {\n    let id = filmId;\n    var li=[];\n    var fetchData= async() => {\n      await fetch('https://swapi.dev/api/films/'+id+'/')\n       .then(res => res.json())\n       .then(\n         async(result) => {\n           for(var i=0;i<result.characters.length;i++){\n             const link = result.characters[i].replace('http:', 'https:')\n             const response = await fetch(link);\n             const json = await response.json();\n             li.push(json.name);\n           }\n           setIsLoaded(true);\n           setItems(li);\n         },\n         (error) => {\n           setIsLoaded(true);\n           setError(error);\n         }\n       )\n   }\n    fetchData();    \n  },[filmId])\n  \n\n\n   \n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>\n        <img src=\"https://i.pinimg.com/originals/a7/b0/15/a7b015d343ad801ad6da8c242dc6ae06.gif\" alt=\"Loading...\"/>\n  </div>\n  ;\n  }\n\n  const secondColumnStart = Math.floor(items.length / 2);\n  return (\n    <ul>\n      <h2 className=\"ColorM\">{props.match.params.title}({props.match.params.date.substring(0, 4)})</h2>\n\n      <h4 className=\"ColorTxt\">Characters</h4> \n        <div className=\"row\">\n        <div className=\"col-md-6\">\n            {items.slice(0,secondColumnStart).map((item,i)=> <div key={i}>{item}<br/></div>)}\n        </div>\n        <div className=\"col-md-6\">\n            {items.slice(secondColumnStart).map((item,i)=> <div key={i}>{item}<br/></div>)}                \n        </div>\n    </div>\n   \n    </ul>\n  );\n}","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport ListMovies from './ListMovies'\nimport ListPeople from './ListPeople'\nexport default function Roster() {\n    return (\n      <div>\n        <Router>\n          <Route exact path='/interactive-react' component={ListMovies}/>\n          <Route path='/interactive-react/:title/:date/:number' component={ListPeople}/>\n        </Router>\n      </div>\n    );\n  }","import React from 'react';\nimport '../css/Movie.css';\nfunction StarWarImg() {\n  return (\n    <div>\n        <img src=\"https://i.pinimg.com/originals/5b/e1/23/5be123e279309353d5368b21e8074c06.jpg\" alt=\"Star War\"/>\n    </div>\n  );\n}\n\nexport default StarWarImg;","import React from 'react';\nimport './App.css';\nimport Main from './Components/Main';\nimport StarWarImg from './Components/StarWarImg';\n\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <header className=\"App-header\" >\n        <StarWarImg />\n        <Main />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}