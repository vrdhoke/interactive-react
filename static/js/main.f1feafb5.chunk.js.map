{"version":3,"sources":["Components/Movie.js","Components/MoviesList.js","Components/CharactersList.js","Components/Main.js","Components/StarWarImg.js","App.js","serviceWorker.js","index.js"],"names":["Movie","props","movie","title","release_date","className","substring","MoviesList","useState","error","setError","isLoaded","setIsLoaded","movies","setMovies","useEffect","a","fetch","then","res","json","filmResponse","filmsSortedByReleaseDate","results","sort","film1","film2","fetchMovies","message","map","i","key","to","episode_id","src","alt","CharactersList","charactersNames","setCharactersNames","filmId","match","params","number","nameList","filmCharacterAPIs","characters","length","api","replace","response","push","name","fetchData","nextColumnStart","Math","floor","date","slice","Main","exact","path","component","StarWarImg","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.f1feafb5.chunk.js","sourcesContent":["import React from 'react'\nfunction Movie(props) {\n    const {title, release_date} = props.movie;\n    return (\n    <div>\n        {title}<div className=\"movie-date\">Release Year  {release_date.substring(0, 4)}</div>\n    </div>\n    )\n}\n\nexport default Movie","import React, { useState,useEffect } from 'react';\nimport { Link} from 'react-router-dom'\nimport Movie from './Movie';\nimport '../css/Movie.css';\n\nexport default function MoviesList() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [movies, setMovies] = useState([]);\n    useEffect(() => {\n      const fetchMovies = async() => {\n        await fetch(\"https://swapi.dev/api/films/\")\n          .then(res => res.json())\n          .then(\n            (filmResponse) => {\n              setIsLoaded(true);\n              // Sorting Films returned from API in ascending order\n              const filmsSortedByReleaseDate = filmResponse.results.sort((film1, film2) =>\n               film1.release_date.substring(0, 4) - film2.release_date.substring(0, 4));\n               setMovies(filmsSortedByReleaseDate);\n            },\n            (error) => {\n              setIsLoaded(true);\n              setError(error);\n            }\n          )\n      }\n      fetchMovies();\n    },[])\n  \n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>\n        <img className=\"loadingGif\" src=\"https://i.pinimg.com/originals/a7/b0/15/a7b015d343ad801ad6da8c242dc6ae06.gif\" alt=\"Loading...\" /></div>;\n    } else {\n      return (\n        <ul>\n          <h3 className=\"heading-text\">MOVIES</h3>\n          {movies.map((movie,i) => (\n          <div key={i}>\n          <h4 ><Link className=\"movie-text\" to={`/interactive-react/${movie.title}/${movie.release_date}/${movie.episode_id}`}><Movie movie={movie}/></Link></h4>\n          </div>\n          ))}\n        </ul>\n      );\n    }\n  }","import React, { useState,useEffect } from 'react';\nimport '../css/Movie.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default function CharactersList(props) {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [charactersNames, setCharactersNames] = useState([]);\n  const filmId = props.match.params.number;\n \n  useEffect(() => {\n    let nameList=[];\n    const fetchData = async() => {\n      // This API returns promise which again contains APIs for Characters of the movies\n      await fetch(`https://swapi.dev/api/films/${filmId}/`)\n       .then(res => res.json())\n       .then(\n         async(filmCharacterAPIs) => {\n           for(var i=0;i<filmCharacterAPIs.characters.length;i++){\n             const api = filmCharacterAPIs.characters[i].replace('http:', 'https:')\n             const response = await fetch(api);\n             const json = await response.json();\n             nameList.push(json.name);\n           }\n           setIsLoaded(true);\n           setCharactersNames(nameList);\n         },\n         (error) => {\n           setIsLoaded(true);\n           setError(error);\n         }\n       )\n   }\n  fetchData();    \n  },[filmId])\n  \n\n\n   \n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>\n        <img  className=\"loadingGif\" src=\"https://i.pinimg.com/originals/a7/b0/15/a7b015d343ad801ad6da8c242dc6ae06.gif\" alt=\"Loading...\"/>\n  </div>\n  ;\n  }\n \n  const nextColumnStart = Math.floor(charactersNames.length / 2);\n  return (\n    <ul>\n      <h2 className=\"heading-text\">{props.match.params.title}({props.match.params.date.substring(0, 4)})</h2>\n\n      <h4 className=\"color-aqua\">Characters</h4> \n      \n        <div className=\"row\">\n        <div className=\"col-md-6\">\n            {charactersNames.slice(0,nextColumnStart).map((name,i)=> <div key={i}>{name}<br/></div>)}\n        </div>\n        <div className=\"col-md-6\">\n            {charactersNames.slice(nextColumnStart).map((name,i)=> <div key={i}>{name}<br/></div>)}                \n        </div>\n    </div>\n   \n    </ul>\n  );\n}","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport MoviesList from './MoviesList'\nimport CharactersList from './CharactersList'\nexport default function Main() {\n    return (\n      <div>\n        <Router>\n          <Route exact path='/interactive-react' component={MoviesList}/>\n          <Route path='/interactive-react/:title/:date/:number' component={CharactersList}/>\n        </Router>\n      </div>\n    );\n  }","import React from 'react';\nimport '../css/Movie.css';\nfunction StarWarImg() {\n  return (\n    <div>\n        <img className=\"headImage\" src=\"https://i.pinimg.com/originals/5b/e1/23/5be123e279309353d5368b21e8074c06.jpg\" alt=\"Star War\"/>\n    </div>\n  );\n}\n\nexport default StarWarImg;","import React from 'react';\nimport './App.css';\nimport Main from './Components/Main';\nimport StarWarImg from './Components/StarWarImg';\n\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <header className=\"App-header\" >\n        <StarWarImg />\n        <Main />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}